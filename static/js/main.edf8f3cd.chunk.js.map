{"version":3,"sources":["store/app/actions.js","store/app/reducer.js","services/Api.js","services/hackerNewsApi.js","store/story/actions.js","store/story/reducer.js","store/reducer.js","store/middleware.js","store/index.js","store/story/selectors.js","styles/palette.js","utils/getSiteHostname.js","utils/getArticleLink.js","components/ListItem/styles.js","components/ListItem/index.js","components/List/styles.js","components/List/index.js","components/App/styles.js","styles/mediaQueries.js","components/Loader/styles.js","components/Loader/index.js","components/App/App.js","components/App/index.js","styles/globals.js","serviceWorker.js","index.js"],"names":["actionTypes","SET_THEME","app","state","theme","type","payload","API_ROOT","process","URL","HEADERS","Accept","client","baseURL","timeout","headers","auth","axios","create","interceptors","response","use","this","handleSuccess","handleError","error","Promise","reject","path","get","then","data","post","put","patch","delete","hackerNewsApi","getTopStoryIds","getStory","id","getStoriesByPage","ids","page","limit","begin","end","getPageSlice","storyPromises","items","slice","getPageValues","map","all","NS","FETCH_STORY_IDS_REQUEST","FETCH_STORY_IDS_SUCCESS","FETCH_STORY_IDS_FAILURE","FETCH_STORIES_REQUEST","FETCH_STORIES_SUCCESS","FETCH_STORIES_FAILURE","action","actions","fetchStoryIds","dispatch","storyIds","fetchStories","catch","err","stories","story","isFetching","rootReducer","combineReducers","middlewarelist","push","thunk","middleware","compose","applyMiddleware","configureStore","initialState","createStore","reducer","hasMoreStoriesSelector","createSelector","length","colorsDark","background","backgroundSecondary","text","textSecondary","border","getSiteHostname","siteUrl","hostname","includes","url","parse","split","HN_ROOT","HN_ITEM","HN_USER","getArticleLink","commentUrl","Item","styled","li","Title","h3","Host","span","ExternalLink","a","Description","div","CommentLink","LINK_REL","ListItem","by","kids","score","title","site","time","link","userUrl","href","rel","target","ListWrapper","ul","props","List","key","Wrapper","h1","blink","keyframes","Animation","Loader","App","fetchStoriesFirstPage","hasMoreStories","dataLength","next","hasMore","loader","style","height","overflow","React","Component","connect","GlobalStyles","createGlobalStyle","Boolean","window","location","match","console","log","store","ReactDOM","render","document","getElementById","renderApp","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.edf8f3cd.chunk.js","sourcesContent":["const NS = '@hnReader/app';\n\nexport const actionTypes = {\n    SET_THEME: `${NS}/SET_THEME`,\n};\n\nconst actions ={\n    setTheme: (payload = {}) => ({type: actionTypes.SET_THEME, payload}),\n};\n\nexport default actions;","import {actionTypes} from './actions';\n\nconst getInitialState = () => ({\n    theme: 'dark',\n});\n\nconst app = (state = getInitialState(), {type, payload}) => {\n    switch(type) {\n        case actionTypes.SET_THEME:\n            return {\n                ...state,\n                ...payload,\n            };\n        default:\n            return state;\n    }\n\n};\n\nexport default app;","import axios from 'axios';\n\n// Default API will be your root\nconst API_ROOT = process.env.URL || 'http://localhost:3000/';\nconst TIMEOUT = 20000;\nconst HEADERS = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n\nclass ApiService {\n  constructor({ baseURL = API_ROOT, timeout = TIMEOUT, headers = HEADERS, auth }) {\n    const client = axios.create({\n      baseURL,\n      timeout,\n      headers,\n      auth,\n    });\n\n    client.interceptors.response.use(this.handleSuccess, this.handleError);\n    this.client = client;\n  }\n\n  handleSuccess(response) {\n    return response;\n  }\n\n  handleError(error) {\n    return Promise.reject(error);\n  }\n\n  get(path) {\n    return this.client.get(path).then(response => response.data);\n  }\n\n  post(path, payload) {\n    return this.client.post(path, payload).then(response => response.data);\n  }\n\n  put(path, payload) {\n    return this.client.put(path, payload).then(response => response.data);\n  }\n\n  patch(path, payload) {\n    return this.client.patch(path, payload).then(response => response.data);\n  }\n\n  delete(path) {\n    return this.client.delete(path).then(response => response.data);\n  }\n}\n\nexport default ApiService;","import ApiService from './Api';\n\nconst JSON_QUERY = '.json?print=pretty';\n\nconst BASE_URL = 'https://hacker-news.firebaseio.com/v0';\n\nconst client = new ApiService({baseURL: BASE_URL});\n\n\nconst hackerNewsApi = {};\n\nconst PAGE_LIMIT = 20;\nconst getPageSlice = (limit, page = 0) => ({begin: page * limit, end: (page + 1) * limit});\n\nconst getPageValues = ({begin, end, items}) => items.slice(begin, end);\n\n//hackerNewsApi.getTopStoryIds = () => client.get(`/topstories${JSON_QUERY}`);\nhackerNewsApi.getTopStoryIds = () => client.get(`/topstories${JSON_QUERY}`);\nhackerNewsApi.getStory = id => client.get(`/item/${id}${JSON_QUERY}`);\nhackerNewsApi.getStoriesByPage = (ids, page) => {\n    const {begin, end} =  getPageSlice(PAGE_LIMIT, page);\n    const activeIds = getPageValues({begin, end, items: ids});\n    const storyPromises = activeIds.map(id => hackerNewsApi.getStory(id));\n    return Promise.all(storyPromises); \n};\n\n\nexport default hackerNewsApi;\n\n// import ApiService from './Api';\n\n// const JSON_QUERY = '.json?print=pretty';\n// const BASE_URL = 'https://hacker-news.firebaseio.com/v0';\n// const client = new ApiService({ baseURL: BASE_URL });\n\n// const hackerNewsApi = {};\n\n// const PAGE_LIMIT = 20;\n// const getPageSlice = (limit, page = 0) => ({ begin: page * limit, end: (page + 1) * limit });\n// const getPageValues = ({ begin, end, items }) => items.slice(begin, end);\n\n// hackerNewsApi.getTopStoryIds = () => client.get(`/topstories${JSON_QUERY}`);\n// hackerNewsApi.getStory = id => client.get(`/item/${id}${JSON_QUERY}`);\n// hackerNewsApi.getStoriesByPage = (ids, page) => {\n//   const { begin, end } = getPageSlice(PAGE_LIMIT, page);\n//   const activeIds = getPageValues({ begin, end, items: ids });\n//   const storyPromises = activeIds.map(id => hackerNewsApi.getStory(id));\n//   return Promise.all(storyPromises);\n// };\n\n// export default hackerNewsApi;","import hackerNewsApi from 'services/hackerNewsApi';\n\nconst NS = '@hnClone/story';\n\nexport const actionTypes = {\n    FETCH_STORY_IDS_REQUEST: `${NS}/FETCH_STORY_IDS_REQUEST`,\n    FETCH_STORY_IDS_SUCCESS: `${NS}/FETCH_STORY_IDS_SUCCESS`,\n    FETCH_STORY_IDS_FAILURE: `${NS}/FETCH_STORY_IDS_FAILURE`,\n    FETCH_STORIES_REQUEST: `${NS}/FETCH_STORIES_REQUEST`,\n    FETCH_STORIES_SUCCESS: `${NS}/FETCH_STORIES_SUCCESS`,\n    FETCH_STORIES_FAILURE: `${NS}/FETCH_STORIES_FAILURE`,\n};\n\nconst action = (type, payload) => ({type, payload});\n\nconst actions = {\n    fetchStoryIds: (payload = {}) => {\n        return dispatch => {\n            dispatch(action(actionTypes.FETCH_STORY_IDS_REQUEST), payload);\n            return hackerNewsApi.getTopStoryIds()\n                    .then(storyIds => {\n                        dispatch(action(actionTypes.FETCH_STORY_IDS_SUCCESS, {storyIds}));\n                        dispatch(actions.fetchStories({ storyIds, page: 0}));\n                        return storyIds;\n                    })\n                    .catch(err => dispatch(action(actionTypes.FETCH_STORY_IDS_FAILURE, err)));\n        }\n    },\n    fetchStories: (payload = {}) => {\n        return dispatch => {\n            dispatch(action(actionTypes.FETCH_STORIES_REQUEST, payload));\n            const { storyIds, page }  = payload;\n\n            return hackerNewsApi\n                .getStoriesByPage(storyIds, page)\n                .then(stories => dispatch(action(actionTypes.FETCH_STORIES_SUCCESS, { stories })))\n                .catch(err=>dispatch(action(actionTypes.FETCH_STORIES_FAILURE, err)));\n        };\n    }\n}\n\nexport default actions;","import { actionTypes } from './actions';\n\nconst getInitialState = () => ( {\n    storyIds: [],\n    stories: [],\n    page: 0,\n    isFetching: false,\n    error: ''\n});\n\nconst story = (state = getInitialState(), { type, payload }) => {\n    switch(type) {\n        case actionTypes.FETCH_STORY_IDS_REQUEST:\n        case actionTypes.FETCH_STORIES_REQUEST:\n            return {\n                ...state,\n                isFetching: true,\n            };\n        case actionTypes.FETCH_STORY_IDS_SUCCESS:\n            return {\n                ...state,\n                ...payload,\n            };\n        case actionTypes.FETCH_STORIES_SUCCESS:\n            return {\n                ...state,\n                stories: [...state.stories, ...payload.stories],\n                page: state.page + 1,\n                isFetching: false,\n            };\n        default:\n            return state;\n            \n\n                \n    }\n};\n\nexport default story;","import { combineReducers } from 'redux';\nimport app from './app/reducer';\nimport story from './story/reducer';\n\nconst rootReducer = combineReducers({\n    app,\n    story,\n});\n\nexport default rootReducer;","import { applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nconst isProd = process.env.NODE_ENV === 'production';\nconst middlewarelist = [];\n\nmiddlewarelist.push(thunk);\nif(!isProd) {\n    middlewarelist.push(createLogger());\n}\n\nconst middleware = compose(applyMiddleware(...middlewarelist));\n\nexport default middleware;","import { createStore } from 'redux';\nimport reducer from './reducer';\nimport middleware from './middleware';\n\nconst configureStore = initialState => {\n    const store = createStore(reducer, initialState, middleware);\n    return store;\n};\n\nexport default configureStore;","import {createSelector} from 'reselect';\n\nconst storyIdsSelector = state => state.story.storyIds;\n\nconst storiesSelector = state =>   state.story.stories;\n\nexport const hasMoreStoriesSelector = createSelector(\n    storyIdsSelector,\n    storiesSelector,\n    (storyIds, stories) => storyIds.length > stories.length,\n);","export const colorsDark = {\n    background: '#272727',\n    backgroundSecondary: '#393C3E',\n    text: '#bfbebe',\n    textSecondary: '#848886',\n    border: '#272727',\n};\n\nexport const colorsLight = {\n    background: '#EAEAEA',\n    backgroundSecondary: '#F8F8F8',\n    text: '#848886',\n    textSecondary: '#aaaaaa',\n    border: '#EAEAEA',\n};","import url from 'url';\n\nconst getSiteHostname = siteUrl => {\n  let hostname = '';\n\n  if (siteUrl) {\n    if (!siteUrl.includes('//')) {\n      siteUrl = `http://${siteUrl}`;\n    }\n\n    hostname = url.parse(siteUrl).hostname;\n  }\n\n  if (hostname.includes('www.')) {\n    hostname = hostname.split('www.')[1];\n  }\n\n  return hostname;\n};\n\nexport default getSiteHostname;","const HN_ROOT = 'https://news.ycombinator.com';\nexport const HN_ITEM = `${HN_ROOT}/item?id=`;\nexport const HN_USER = `${HN_ROOT}/user?id=`;\n\nconst getArticleLink = ({ url, id }) => {\n  const commentUrl = `${HN_ITEM}${id}`;\n  const link = !!url ? url : commentUrl;\n  return link;\n};\n\nexport default getArticleLink;","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  border-bottom: 1px solid ${({ theme }) => theme.border};\n  padding: 14px 24px;\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nexport const Title = styled.h3`\n  color: ${({ theme }) => theme.text};\n  margin-top: 0;\n  margin-bottom: 6px;\n  font-weight: 400;\n  font-size: 16px;\n  letter-spacing: 0.4px;\n`;\n\nexport const Host = styled.span`\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 12px;\n`;\n\nexport const ExternalLink = styled.a`\n  color: ${({ theme }) => theme.text};\n  display: flex;\n  width: 100%;\n  height: 100%;\n  flex-direction: row;\n  align-items: center;\n  text-decoration: none;\n`;\n\nexport const Description = styled.div`\n  font-size: 14px;\n  color: ${({ theme }) => theme.textSecondary};\n`;\n\nexport const CommentLink = styled.a`\n  color: ${({ theme }) => theme.textSecondary};\n  &:visited {\n    color: ${({ theme }) => theme.textSecondary};\n  }\n`;","import React from 'react';\n//import Timeago from 'timeago.js';\nimport getSiteHostname from 'utils/getSiteHostname';\nimport getArticleLink, { HN_ITEM, HN_USER } from 'utils/getArticleLink';\n\n\nimport { Item, Title, Host, ExternalLink, Description, CommentLink } from './styles';\n//const timeago = Timeago();\nconst LINK_REL = 'noopener noreferrer nofollow';\nconst ListItem = ({ by, kids = [], score, url, title, id, type, time }) => {\n    const site = getSiteHostname(url) || 'new.ycombinator.com';\n    const link = getArticleLink({ url, id });\n    const commentUrl = `${HN_ITEM}${id}`;\n    const userUrl = `${HN_USER}${by}`;\n    return (\n        <Item>\n            <ExternalLink href={link} rel={LINK_REL} target=\"_blank\">\n                <Title>{title} <Host>{site}</Host></Title>\n            </ExternalLink>\n            <Description>\n                {score} points by {' '}\n                <CommentLink href={userUrl } rel={LINK_REL} target=\"_blank\">\n                    {by}\n                </CommentLink>\n                {/* {timeago.format(new Date(time * 1000).toISOString())} */}\n                {' | '}\n                <CommentLink href={commentUrl} rel={LINK_REL} target=\"_blank\">\n                    {kids.length} Comments\n                </CommentLink>\n            </Description>\n        </Item>\n    );\n};\n\nexport default ListItem","import styled from 'styled-components';\n\nexport const ListWrapper = styled.ul`\n    background-color: ${props => props.theme.backgroundSecondary};\n    border-radius: 4px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-bottom: 20px;\n    display: flex;\n    flex-direction: column;\n`;","import React from 'react';\nimport ListItem from 'components/ListItem';\nimport { ListWrapper } from './styles'; \n\nconst List = ({stories}) => (\n    <ListWrapper>\n        {\n        stories.map(\n                         (story) => <ListItem {...story} key={story.id}/>\n                    )\n        }\n        \n    </ListWrapper>\n);\n\nexport default List;","import styled from 'styled-components';\nimport { tablet } from 'styles/mediaQueries';\n\nexport const Wrapper = styled.div`\n    width: 85%;\n    margin-left: auto;\n    margin-right: auto;\n    height: 100%;\n    overflow: hidden;\n    padding-bottom: 200px;\n\n    ${tablet} {\n        width: 96%;\n    }\n`;\n\nexport const Title = styled.h1`\n    color: ${props => props.theme.textSecondary};\n    font-size: 20px;\n    font-weight: 300;\n    margin-top: 24px;\n    margin-bottom: 26px;\n`;","export const mobile = '@media only screen and (max-width: 480px)';\nexport const tablet = '@media only screen and (max-width: 768px)';","import  styled, { keyframes } from 'styled-components';\n\nconst blink = keyframes`\n    0% {\n        opacity: .2;\n    }\n    20% {\n        opacity: 1;\n    }\n    100% {\n        opacity: .2;\n    }\n`;\n\n\nexport const Animation = styled.div`\n    text-align: center;\n    \n    span {\n        color: ${({theme}) => theme.textSecondary};\n        display: inline-block;\n        margin-left: 4px;\n        margin-right: 4px;\n        font-size: 80px;\n        line-height: .1;\n        animation-name: ${blink};\n        animation-duration: 1s;\n        animation-iteration-count: infinite;\n        animation-fill-mode: both;\n\n    }\n    \n    span:nth-child(2) {\n        animation-delay: .2s;\n    }\n    span:nth-child(3) {\n        animation-delay: .4s;\n    }\n    `;","import React from 'react';\nimport {Animation} from './styles';\n\nconst Loader = () => (\n    <Animation>\n        <span>.</span>\n        <span>.</span>\n        <span>.</span>\n    </Animation>\n);\n\n\nexport default Loader;","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { ThemeProvider } from 'styled-components';\nimport { colorsDark } from 'styles/palette';\nimport List from 'components/List';\nimport { Wrapper, Title } from './styles';\nimport Loader from 'components/Loader';\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.fetchStoriesFirstPage();\n    }\n\n    fetchStories = () => {\n        const {storyIds, page, fetchStories, isFetching } = this.props;\n        if(!isFetching) {\n            fetchStories({storyIds, page});\n        }\n    }\n    //function App() {\n    render() {\n        const { stories, hasMoreStories } = this.props;\n        return (\n            <ThemeProvider theme={colorsDark}>\n                <div>\n                    <Wrapper>\n                        <Title>Hacker News Reader</Title>\n                        <InfiniteScroll dataLength={stories.length}\n                                        next={this.fetchStories}\n                                        hasMore={hasMoreStories}\n                                        loader={<Loader/>}\n                                        style={{\n                                            height: '100%',\n                                            overflow: 'visible'\n                                        }}>\n                        <List stories={stories}/>\n                        </InfiniteScroll>\n                    </Wrapper>\n                </div>\n            </ThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport  actions  from 'store/story/actions';\nimport { hasMoreStoriesSelector } from  'store/story/selectors';\nimport App from './App';\n\n\n\nconst mapStateToProps = state => ({ \n    stories: state.story.stories,\n    page: state.story.page,\n    storyIds: state.story.storyIds,\n    isFetching: state.story.isFetching,\n    hasMoreStories: hasMoreStoriesSelector(state),\n});\n\nconst mapDispatchProps = dispatch => ({\n  fetchStoriesFirstPage: () => dispatch(actions.fetchStoryIds()),\n  fetchStories: ({storyIds, page}) => dispatch(actions.fetchStories({storyIds, page})),\n});\n\nexport default connect(mapStateToProps,mapDispatchProps)(App);","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n    * {\n      box-sizing: border-box;\n    }\n    html, body {\n      font-family: Lato,Helvetica-Neue,Helvetica,Arial,sans-serif;\n      width: 100vw;\n      overflow-x: hidden;\n      margin: 0;\n      padding: 0;\n    }\n    ul {\n      list-style: none;\n      padding: 0;\n    }\n    a {\n      text-decoration: none;\n      &:visited {\n        color: inherit;\n      }\n    }\n  `;\n\nexport default GlobalStyles;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport configureStore from 'store';\nimport App from 'components/App';\nimport GlobalStyles from 'styles/globals';\nimport * as serviceWorker from './serviceWorker';\nimport hackerNewsApi from 'services/hackerNewsApi';\n\n \nhackerNewsApi.getTopStoryIds().then( ids => console.log(ids));\nconst renderApp = () => {\n  const store = configureStore({});\n\n  if(process.env.NODE_ENV !== 'production') {\n    console.log('Initial state ->');\n    console.log(store.getState());\n  }\n  store.dispatch({type: '@hnClone/@@INIT'});\n  ReactDOM.render(\n    <Provider store={store}>\n      <div>\n        <GlobalStyles />\n        <App />\n      </div>\n    </Provider>,\n    document.getElementById('root')\n  ); \n\n}\n\nrenderApp();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}